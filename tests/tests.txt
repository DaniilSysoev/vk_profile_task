Тест кейсы для проверки API


1. Проверка регистрации пользователя с некорректными данными

1.1 Проверка регистрации пользователя с корректными данными
Предусловие: нацелить Postman на url /api/v1/users/ и выбрать метод POST, не иметь такой же записи в базе данных и не иметь токена в headers
Step1:
    Пользователь отправляет POST запрос:
        {
            "username": "Daniil",
            "password": "123"
        }
    Ожидаемый результат: возвращается токен и статус 201
    Фактический результат:
        {
            "token": "91ad0c8e209afb4762a1cfceff1c14950223e0b7"
        }
        Status: 201 Created
Step2:
    Пользователь отправляет GET запрос по тому же url.
    Ожидаемый результат:
        [
            {
                "id": 1,
                "username": "Daniil"
            }
        ]
    Фактический результат:
        [
            {
                "id": 1,
                "username": "Daniil"
            }
        ]
        Status: 200 OK
    Статус: Pass

1.2 Проверка регистрации пользователя с некорректными данными

1.2.1 Если такой пользователь уже существует
Предусловие: Выполнить регистрацию пользователя(пройти первый тест кейс), нацелить Postman на url /api/v1/users/ и выбрать метод POST
Step1:
    Пользователь отправляет POST запрос:
        {
            "username": "Daniil",
            "password": "123"
        }
    Ожидаемый результат: возвращается ошибка и статус 400
    Фактический результат:
        {
            "username": [
                "Пользователь с таким именем уже существует."
            ]
        }
        Status: 400 Bad Request
    Статус: Pass

1.2.2 Не указал username
Предусловие: нацелить Postman на url /api/v1/users/ и выбрать метод POST
Step1:
    Пользователь отправляет POST запрос:
        {
            "password": "123"
        }
    Ожидаемый результат: возвращается ошибка и статус 400
    Фактический результат:
        {
            "username": [
                "Обязательное поле."
            ]
        }
        Status: 400 Bad Request
    Статус: Pass

1.2.3 Не указал password
Предусловие: нацелить Postman на url /api/v1/users/ и выбрать метод POST
Step1:
    Пользователь отправляет POST запрос:
        {
            "username": "Daniil"
        }
    Ожидаемый результат: возвращается ошибка и статус 400
    Фактический результат:
        {
            "password": [
                "Обязательное поле."
            ]
        }
        Status: 400 Bad Request
    Статус: Pass

1.2.4 Не указал username и password
Предусловие: нацелить Postman на url /api/v1/users/ и выбрать метод POST
Step1:
    Пользователь отправляет POST запрос:
        {
        }
    Ожидаемый результат: возвращается ошибка и статус 400
    Фактический результат:
        {
            "username": [
                "Обязательное поле."
            ],
            "password": [
                "Обязательное поле."
            ]
        }
        Status: 400 Bad Request
    Статус: Pass


2. Проверка функции авторизации пользователя

2.1 Проверка авторизации пользователя с корректными данными
Предусловие: Выполнить регистрацию пользователя(пройти первый тест кейс), нацелить Postman на url /api/v1/users/login/ и выбрать метод POST
Step1:
    Пользователь отправляет POST запрос:
        {
            "username": "Daniil",
            "password": "123"
        }
    Ожидаемый результат: возвращается токен и статус 200
    Фактический результат:
        {
            "token": "91ad0c8e209afb4762a1cfceff1c14950223e0b7"
        }
        Status: 200 OK
    Статус: Pass

2.2 Проверка авторизации пользователя с некорректными данными

2.2.1 Такого пользователя не существует
Предусловие: нацелить Postman на url /api/v1/users/login/ и выбрать метод POST
Step1:
    Пользователь отправляет POST запрос:
        {
            "username": "Alex",
            "password": "123"
        }
    Ожидаемый результат: возвращается ошибка и статус 400
    Фактический результат:
        {
            "error": "Ошибка данных"
        }
        Status: 400 Bad Request
    Статус: Pass

2.2.2 Не указал username
Предусловие: нацелить Postman на url /api/v1/users/login/ и выбрать метод POST
Step1:
    Пользователь отправляет POST запрос:
        {
            "password": "123"
        }
    Ожидаемый результат: возвращается ошибка и статус 400
    Фактический результат:
        {
            "error": "Ошибка данных"
        }
        Status: 400 Bad Request
    Статус: Pass

2.2.3 Не указал password
Предусловие: нацелить Postman на url /api/v1/users/login/ и выбрать метод POST
Step1:
    Пользователь отправляет POST запрос:
        {
            "username": "Daniil"
        }
    Ожидаемый результат: возвращается ошибка и статус 400
    Фактический результат:
        {
            "error": "Ошибка данных"
        }
        Status: 400 Bad Request
    Статус: Pass

2.2.4 Не указал username и password
Предусловие: нацелить Postman на url /api/v1/users/login/ и выбрать метод POST
Step1:
    Пользователь отправляет POST запрос:
        {
        }
    Ожидаемый результат: возвращается ошибка и статус 400
    Фактический результат:
        {
            "error": "Ошибка данных"
        }
        Status: 400 Bad Request
    Статус: Pass

2.2.5 Неверный пароль
Предусловие: Выполнить регистрацию пользователя(пройти первый тест кейс), нацелить Postman на url /api/v1/users/login/ и выбрать метод POST
Step1:
    Пользователь отправляет POST запрос:
        {
            "username": "Daniil",
            "password": "1234"
        }
    Ожидаемый результат: возвращается ошибка и статус 400
    Фактический результат:
        {
            "error": "Ошибка данных"
        }
        Status: 400 Bad Request
    Статус: Pass


3. Проверка функции отправки заявки в друзья другому пользователю

3.1 Проверка отправки заявки в друзья другому пользователю с корректными данными

3.1.1 Проверка отправки в друзья через путь api/v1/users/{id}/add_friend/
Предусловие: Выполнить регистрацию двух пользователей, нацелить Postman на url api/v1/users/{id}/add_friend/ и выбрать метод POST
Step1:
    Пользователь отправляет GET запрос по url api/v1/users/ и получает список всех пользователей
    Ожидаемый результат: возвращается список всех пользователей и статус 200
    Фактический результат:
        [
            {
                "id": 1,
                "username": "Daniil"
            },
            {
                "id": 2,
                "username": "Alex"
            }
        ]
        Status: 200 OK
Step2:
    Пользователь добавляет токен в Headers запроса и отправляет POST запрос по url api/v1/users/{id}/add_friend/
    Ожидаемый результат: возвращается запись из таблицы Requests и статус 201
    Фактический результат:
        {
            "id": 1,
            "sender_id": 2,
            "receiver_id": 1
        }
        Status: 201 OK
    Статус: Pass

3.1.2 Проверка отправки в друзья через путь api/v1/requets/ и запрос с параметром receiver_id
Предусловие: Выполнить регистрацию двух пользователей, нацелить Postman на url api/v1/requets/ и выбрать метод POST
Step1:
    Пользователь отправляет POST запрос по url api/v1/requets/ с параметром receiver_id равным id пользователя, которому отправляется заявка в друзья.
    Ожидаемый результат: возвращается запись из таблицы Requests и статус 201
    Фактический результат:
        {
            "id": 2,
            "sender_id": 2,
            "receiver_id": 1
        }
        Status: 201 OK
    Статус: Pass

3.2 Проверка отправки заявки в друзья другому пользователю с некорректными данными

3.2.1 Проверка отправки заявки в друзья другому пользователю с некорректным id
Предусловие: Выполнить регистрацию двух пользователей, нацелить Postman на url api/v1/users/{id}/add_friend/ и выбрать метод POST
Step1:
    Пользователь отправляет POST запрос по url api/v1/users/{id}/add_friend/ c несуществующим айди
    Ожидаемый результат: возвращается ошибка и статус 400
    Фактический результат:
        {
            "receiver_id": [
                "Недопустимый первичный ключ \"123123\" - объект не существует."
            ]
        }
        Status: 400 Bad Request
    Статус: Pass

3.2.2 Проверка отправки заявки в друзья другому пользователю без параметра receiver_id
Предусловие: Выполнить регистрацию двух пользователей, нацелить Postman на url api/v1/requests/ и выбрать метод POST
Step1:
    Пользователь отправляет POST запрос по url с несуществующим параметром receiver_id
    Ожидаемый результат: возвращается ошибка и статус 400
    Фактический результат:
        {
            "receiver_id": [
                "Недопустимый первичный ключ \"342234\" - объект не существует."
            ]
        }
        Status: 400 Bad Request
    Статус: Pass

3.2.3 Проверка отправки заявки в друзья другому пользователю с некорректной авторизацией
Предусловие: Выполнить регистрацию двух пользователей, выбрать метод POST и добавить токен в хеддер
Step1:
    Пользователь отправляет POST запрос по url api/v1/users/{id}/add_friend/ с некорректным токеном
    Ожидаемый результат: возвращается ошибка и статус 400
    Фактический результат:
        {
            "error": "Вы не авторизованы"
        }
        status: 400 Bad Request
Step2:
    Пользователь отправляет POST запрос по url api/v1/requests/ с некорректным токеном
    Ожидаемый результат: возвращается ошибка и статус 400
    Фактический результат:
        {
            "detail": "Учетные данные не были предоставлены."
        }
        status: 400 Bad Request
    Статус: Pass

4. Проверка функции принятия заявки от другого пользователя

4.1 Проверка функции принятия заявки с корректными данными

4.1.1 Проверка функции принятия заявки через путь api/v1/requests/{id}/accept
Предусловие: Выполнить регистрацию двух пользователей, отправить заявку в друзья от первого пользователя ко второму, нацелить Postman на url api/v1/requests/{id}/accept/ и выбрать метод POST
Step1:
    Пользователь отправляет POST запрос по url
    Ожидаемый результат: заявка принята и возвращается статус 201
    Фактический результат:
        {
            "message": "Заявка принята"
        }
        Status: 201 Created
    Статус: Pass

4.1.2 проверка функции принятия заявки отправкой ответной заявки в друзья
Предусловие: Выполнить регистрацию двух пользователей, отправить заявку в друзья от первого пользователя ко второму, нацелить Postman на url api/v1/users/{id}/add_friend/ и выбрать метод POST
Step1:
    Пользователь отправляет POST запрос по url api/v1/users/{id}/add_friend/
    Ожидаемый результат: заявка принята и вовзращается статус 201
    Фактический результат:
        {
            "message": "Заявка принята"
        }
        Status: 201 Created
    Статус: Pass

4.2 Проверка функции принятия заявки с некорректными данными

4.2.1 Проверка функции принятия заявки с некорректным id
Предусловие: Выполнить регистрацию двух пользователей, отправить заявку в друзья от первого пользователя ко второму, нацелить Postman на url api/v1/requests/{id}/accept/ и выбрать метод POST
Step1:
    Пользователь указывает неверный id в url в POST запросе
    Ожидаемый результат: возвращается ошибка и статус 400
    Фактический результат:
        {
            "error": "Такой заявки не существует"
        }
        Status: 400 Bad Request
    Статус: Pass

4.2.2 Проверка функции принятия заявки с некорректной авторизацией
Предусловие: Выполнить регистрацию двух пользователей, отправить заявку в друзья от первого пользователя ко второму, нацелить Postman на url api/v1/requests/{id}/accept/ и выбрать метод POST
Step1:
    Пользователь отправляет POST запрос по url api/v1/requests/{id}/accept с некорректным токеном
    Ожидаемый результат: возвращается ошибка и статус 401
    Фактический результат:
        {
            "detail": "Учетные данные не были предоставлены."
        }
        Status: 401 Unauthorized
    Статус: Pass

5. Проверка функции отклонения заявки от другого пользователя

5.1 Проверка функции отклонения заявки с корректными данными
Предусловие: Выполнить регистрацию двух пользователей, отправить заявку в друзья от первого пользователя ко второму, нацелить Postman на url api/v1/requests/{id}/delete/ и выбрать метод POST
Step1:
    Пользователь отправляет POST запрос по url localhost:8000/api/v1/requests/7/delete/
    Ожидаемый результат: запись удалена и возвращается статус 204
    Фактический результат:
        {
            "message": "Заявка удалена"
        }
        Status: 204 No Content
    Статус: Pass

5.2 Проверка функции отклонения заявки с некорректными данными

5.2.1 Проверка функции отклонения заявки с некорректным id
Предусловие: Выполнить регистрацию двух пользователей, отправить заявку в друзья от первого пользователя ко второму, нацелить Postman на url api/v1/requests/{id}/delete/ и выбрать метод POST
Step1:
    Пользователь указывает неверный id в url в POST запросе
    Ожидаемый результат: возвращается ошибка и статус 400
    Фактический результат:
        {
            "error": "Такой заявки не существует"
        }
        Status: 400 Bad Request
    Статус: Pass 

5.2.2 Проверка функции отклонения заявки с некорректной авторизацией
Предусловие: Выполнить регистрацию двух пользователей, отправить заявку в друзья от первого пользователя ко второму, нацелить Postman на url api/v1/requests/{id}/delete/ и выбрать метод POST
Step1:
    Пользователь отправляет POST запрос по url api/v1/requests/{id}/delete с некорректным токеном
    Ожидаемый результат: возвращается ошибка и статус 401
    Фактический результат:
        {
            "detail": "Учетные данные не были предоставлены."
        }
        Status: 401 Unauthorized
    Статус: Pass

6. Проверка функции удаления заявки другому пользователю

6.1 Проверка функции удаления заявки с корректными данными
Предусловие: Выполнить регистрацию двух пользователей, отправить заявку в друзья от первого пользователя ко второму, нацелить Postman на url api/v1/requests/{id}/delete/ и выбрать метод POST
Step1:
    Пользователь отправляет запрос по url api/v1/requests/{id}/delete/
    Ожидаемый результат: запись удалена и возвращается статус 204
    Фактический результат:
        {
            "message": "Заявка удалена"
        }
        Status: 204 No Content
    Статус: Pass

6.2 Проверка функции удаления заявки с некорректными данными

6.2.1 Проверка функции удаления заявки с некорректным id
Предусловие: Выполнить регистрацию двух пользователей, отправить заявку в друзья от первого пользователя ко второму, нацелить Postman на url api/v1/requests/{id}/delete/ и выбрать метод POST
Step1:
    Пользователь отправляет POST запрос по url api/v1/requests/{id}/delete/ с некорректным id
    Ожидаемый результат: возвращается ошибка и статус 400
    Фактический результат:
        {
            "error": "Такой заявки не существует"
        }
        Status: 400 Bad Request
    Статус: Pass

6.2.2 Проверка функции удаления заявки с некорректной авторизацией
Предусловие: Выполнить регистрацию двух пользователей, отправить заявку в друзья от первого пользователя ко второму, нацелить Postman на url api/v1/requests/{id}/delete/ и выбрать метод POST
Step1:
    Пользователь отправляет POST запрос по url api/v1/requests/{id}/delete/ с некорректным токеном
    Ожидаемый результат: возвращается ошибка и статус 401
    Фактический результат:
        {
            "detail": "Учетные данные не были предоставлены."
        }
        Status: 401 Unauthorized
    Статус: Pass

7. Проверка функции просмотра списка своих исходящих заявок в друзья.

7.1 Проверка функции просмотра списка своих исходящих заявок с корректными данными
Предусловие: Выполнить регистрацию двух пользователей, отправить заявку в друзья от первого пользователя ко второму, нацелить Postman на url api/v1/requests/sended/ и выбрать метод GET
Step1:
    Пользователь добавляет токен в хеддер и отправляет GET запрос по url api/v1/requests/sended/
    Ожидаемый результат: возвращается список исходящих заявок и статус 200
    Фактический результат:
        [
            {
                "id": 9,
                "sender_id": 2,
                "receiver_id": 1
            }
        ]
        Status: 200 OK
    Статус: Pass

7.2 Проверка функции просмотра списка своих исходящих заявок с некорректными данными
Предусловие: Выполнить регистрацию двух пользователей, отправить заявку в друзья от первого пользователя ко второму, нацелить Postman на url api/v1/requests/sended/ и выбрать метод GET
Step1:
    Пользователь не добавляет токен в хеддер и отправляет запрос
    Ожидаемый результат: возвращается ошибка и статус 401
    Фактический результат:
        {
            "detail": "Учетные данные не были предоставлены."
        }
        Status: 401 Unauthorized
    Статус: Pass

8. Проверка функции просмотра списка своих входящих заявок в друзья.

8.1 Проверка функции просмотра списка своих входящих заявок с корректными данными
Предусловие: Выполнить регистрацию двух пользователей, отправить заявку в друзья от первого пользователя ко второму, нацелить Postman на url api/v1/requests/received/ и выбрать метод GET
Step1:
    Пользователь отправляет запрос с токеном по url api/v1/requests/received/
    Ожидаемый результат: возвращается список входящих заявок и статус 200
    Фактический результат:
        [
            {
                "id": 9,
                "sender_id": 2,
                "receiver_id": 1
            }
        ]
        Status: 200 OK
    Статус: Pass

8.2 Проверка функции просмотра списка своих входящих заявок с некорректными данными
Предусловие: Выполнить регистрацию двух пользователей, отправить заявку в друзья от первого пользователя ко второму, нацелить Postman на url api/v1/requests/received/ и выбрать метод GET
Step1:
    Пользователь не указывает токен и отправляет запрос
    Ожидаемый результат: возвращается ошибка и статус 401
    Фактический результат:
        {
            "detail": "Учетные данные не были предоставлены."
        }
        Status: 401 Unauthorized
    Статус: Pass

9. Проверка функции просмотра списка своих друзей.

9.1 Проверка функции просмотра списка своих друзей с корректными данными
Предусловие: Выполнить регистрацию двух пользователей, отправить заявку в друзья от первого пользователя ко второму, принять заявку, нацелить Postman на url api/v1/friends/ и выбрать метод GET
Step1:
    Пользователь отправляет запрос с токеном по url api/v1/friends/
    Ожидаемый результат: возвращается список друзей и статус 200
    Фактический результат:
        [
            "Alex"
        ]
        Status: 200 OK
    Статус: Pass

9.2 Проверка функции просмотра списка своих друзей с некорректными данными
Предусловие: Выполнить регистрацию двух пользователей, отправить заявку в друзья от первого пользователя ко второму, принять заявку, нацелить Postman на url api/v1/friends/ и выбрать метод GET
Step1:
    Пользователь отправляет запрос без токена
    Ожидаемый результат: возвращается ошибка и статус 401
    Фактический результат:
        {
            "detail": "Учетные данные не были предоставлены."
        }
        Status: 401 Unauthorized